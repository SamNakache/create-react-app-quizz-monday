{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samuel\\\\Desktop\\\\cApplication\\\\create-react-app-quizz-monday\\\\quiz-m\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this), document.getElementById('root')); //this would be the object shape for storing the questions  \n//you can change the questions to your own taste or even add more questions..\n\nconst questions = [{\n  question: \"How many days makes a week ?\",\n  optionA: \"10 days\",\n  optionB: \"14 days\",\n  optionC: \"5 days\",\n  optionD: \"7 days\",\n  correctOption: \"optionD\"\n}, {\n  question: \"How many players are allowed on a soccer pitch ?\",\n  optionA: \"10 players\",\n  optionB: \"11 players\",\n  optionC: \"9 players\",\n  optionD: \"12 players\",\n  correctOption: \"optionB\"\n}, {\n  question: \"Who was the first President of USA ?\",\n  optionA: \"Donald Trump\",\n  optionB: \"Barack Obama\",\n  optionC: \"Abraham Lincoln\",\n  optionD: \"George Washington\",\n  correctOption: \"optionD\"\n}, {\n  question: \"30 days has ______ ?\",\n  optionA: \"January\",\n  optionB: \"December\",\n  optionC: \"June\",\n  optionD: \"August\",\n  correctOption: \"optionC\"\n}, {\n  question: \"How manay hours can be found in a day ?\",\n  optionA: \"30 hours\",\n  optionB: \"38 hours\",\n  optionC: \"48 hours\",\n  optionD: \"24 hours\",\n  correctOption: \"optionD\"\n}, {\n  question: \"Which is the longest river in the world ?\",\n  optionA: \"River Nile\",\n  optionB: \"Long River\",\n  optionC: \"River Niger\",\n  optionD: \"Lake Chad\",\n  correctOption: \"optionA\"\n}, {\n  question: \"_____ is the hottest Continent on Earth ?\",\n  optionA: \"Oceania\",\n  optionB: \"Antarctica\",\n  optionC: \"Africa\",\n  optionD: \"North America\",\n  correctOption: \"optionC\"\n}, {\n  question: \"Which country is the largest in the world ?\",\n  optionA: \"Russia\",\n  optionB: \"Canada\",\n  optionC: \"Africa\",\n  optionD: \"Egypt\",\n  correctOption: \"optionA\"\n}, {\n  question: \"Which of these numbers is an odd number ?\",\n  optionA: \"Ten\",\n  optionB: \"Twelve\",\n  optionC: \"Eight\",\n  optionD: \"Eleven\",\n  correctOption: \"optionD\"\n}, {\n  question: `\"You Can't see me\" is a popular saying by`,\n  optionA: \"Eminem\",\n  optionB: \"Bill Gates\",\n  optionC: \"Chris Brown\",\n  optionD: \"John Cena\",\n  correctOption: \"optionD\"\n}, {\n  question: \"Where is the world tallest building located ?\",\n  optionA: \"Africa\",\n  optionB: \"California\",\n  optionC: \"Dubai\",\n  optionD: \"Italy\",\n  correctOption: \"optionC\"\n}, {\n  question: \"The longest river in the United Kingdom is ?\",\n  optionA: \"River Severn\",\n  optionB: \"River Mersey\",\n  optionC: \"River Trent\",\n  optionD: \"River Tweed\",\n  correctOption: \"optionA\"\n}, {\n  question: \"How many permanent teeth does a dog have ?\",\n  optionA: \"38\",\n  optionB: \"42\",\n  optionC: \"40\",\n  optionD: \"36\",\n  correctOption: \"optionB\"\n}, {\n  question: \"Which national team won the football World cup in 2018 ?\",\n  optionA: \"England\",\n  optionB: \"Brazil\",\n  optionC: \"Germany\",\n  optionD: \"France\",\n  correctOption: \"optionD\"\n}, {\n  question: \"Which US state was Donald Trump Born ?\",\n  optionA: \"New York\",\n  optionB: \"California\",\n  optionC: \"New Jersey\",\n  optionD: \"Los Angeles\",\n  correctOption: \"optionA\"\n}, {\n  question: \"How man states does Nigeria have ?\",\n  optionA: \"24\",\n  optionB: \"30\",\n  optionC: \"36\",\n  optionD: \"37\",\n  correctOption: \"optionC\"\n}, {\n  question: \"____ is the capital of Nigeria ?\",\n  optionA: \"Abuja\",\n  optionB: \"Lagos\",\n  optionC: \"Calabar\",\n  optionD: \"Kano\",\n  correctOption: \"optionA\"\n}, {\n  question: \"Los Angeles is also known as ?\",\n  optionA: \"Angels City\",\n  optionB: \"Shining city\",\n  optionC: \"City of Angels\",\n  optionD: \"Lost Angels\",\n  correctOption: \"optionC\"\n}, {\n  question: \"What is the capital of Germany ?\",\n  optionA: \"Georgia\",\n  optionB: \"Missouri\",\n  optionC: \"Oklahoma\",\n  optionD: \"Berlin\",\n  correctOption: \"optionD\"\n}, {\n  question: \"How many sides does an hexagon have ?\",\n  optionA: \"Six\",\n  optionB: \"Sevene\",\n  optionC: \"Four\",\n  optionD: \"Five\",\n  correctOption: \"optionA\"\n}, {\n  question: \"How many planets are currently in the solar system ?\",\n  optionA: \"Eleven\",\n  optionB: \"Seven\",\n  optionC: \"Nine\",\n  optionD: \"Eight\",\n  correctOption: \"optionD\"\n}, {\n  question: \"Which Planet is the hottest ?\",\n  optionA: \"Jupitar\",\n  optionB: \"Mercury\",\n  optionC: \"Earth\",\n  optionD: \"Venus\",\n  correctOption: \"optionB\"\n}, {\n  question: \"where is the smallest bone in human body located?\",\n  optionA: \"Toes\",\n  optionB: \"Ears\",\n  optionC: \"Fingers\",\n  optionD: \"Nose\",\n  correctOption: \"optionB\"\n}, {\n  question: \"How many hearts does an Octopus have ?\",\n  optionA: \"One\",\n  optionB: \"Two\",\n  optionC: \"Three\",\n  optionD: \"Four\",\n  correctOption: \"optionC\"\n}, {\n  question: \"How many teeth does an adult human have ?\",\n  optionA: \"28\",\n  optionB: \"30\",\n  optionC: \"32\",\n  optionD: \"36\",\n  correctOption: \"optionC\"\n}];\nlet shuffledQuestions = []; //empty array to hold shuffled selected questions out of all available questions\n\nfunction handleQuestions() {\n  //function to shuffle and push 10 questions to shuffledQuestions array\n  //app would be dealing with 10questions per session\n  while (shuffledQuestions.length <= 9) {\n    const random = questions[Math.floor(Math.random() * questions.length)];\n\n    if (!shuffledQuestions.includes(random)) {\n      shuffledQuestions.push(random);\n    }\n  }\n}\n\nlet questionNumber = 1; //holds the current question number\n\nlet playerScore = 0; //holds the player score\n\nlet wrongAttempt = 0; //amount of wrong answers picked by player\n\nlet indexNumber = 0; //will be used in displaying next question\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\n\nfunction NextQuestion(index) {\n  handleQuestions();\n  const currentQuestion = shuffledQuestions[index];\n  document.getElementById(\"question-number\").innerHTML = questionNumber;\n  document.getElementById(\"player-score\").innerHTML = playerScore;\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\n}\n\n_c = NextQuestion;\n\nfunction checkForAnswer() {\n  const currentQuestion = shuffledQuestions[indexNumber]; //gets current Question \n\n  const currentQuestionAnswer = currentQuestion.correctOption; //gets current Question's answer\n\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\n\n  let correctOption = null;\n  options.forEach(option => {\n    if (option.value === currentQuestionAnswer) {\n      //get's correct's radio input with correct answer\n      correctOption = option.labels[0].id;\n    }\n  }); //checking to make sure a radio input has been checked or an option being chosen\n\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\n    document.getElementById('option-modal').style.display = \"flex\";\n  } //checking if checked radio button is same as answer\n\n\n  options.forEach(option => {\n    if (option.checked === true && option.value === currentQuestionAnswer) {\n      document.getElementById(correctOption).style.backgroundColor = \"green\";\n      playerScore++; //adding to player's score\n\n      indexNumber++; //adding 1 to index so has to display next question..\n      //set to delay question number till when next question loads\n\n      setTimeout(() => {\n        questionNumber++;\n      }, 1000);\n    } else if (option.checked && option.value !== currentQuestionAnswer) {\n      const wrongLabelId = option.labels[0].id;\n      document.getElementById(wrongLabelId).style.backgroundColor = \"red\";\n      document.getElementById(correctOption).style.backgroundColor = \"green\";\n      wrongAttempt++; //adds 1 to wrong attempts \n\n      indexNumber++; //set to delay question number till when next question loads\n\n      setTimeout(() => {\n        questionNumber++;\n      }, 1000);\n    }\n  });\n} //called when the next button is called\n\n\nfunction handleNextQuestion() {\n  checkForAnswer(); //check if player picked right or wrong option\n\n  unCheckRadioButtons(); //delays next question displaying for a second just for some effects so questions don't rush in on player\n\n  setTimeout(() => {\n    if (indexNumber <= 9) {\n      //displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\n      NextQuestion(indexNumber);\n    } else {\n      handleEndGame(); //ends game if index number greater than 9 meaning we're already at the 10th question\n    }\n\n    resetOptionBackground();\n  }, 1000);\n} //sets options background back to null after display the right/wrong colors\n\n\nfunction resetOptionBackground() {\n  const options = document.getElementsByName(\"option\");\n  options.forEach(option => {\n    document.getElementById(option.labels[0].id).style.backgroundColor = \"\";\n  });\n} // unchecking all radio buttons for next question(can be done with map or foreach loop also)\n\n\nfunction unCheckRadioButtons() {\n  const options = document.getElementsByName(\"option\");\n\n  for (let i = 0; i < options.length; i++) {\n    options[i].checked = false;\n  }\n} // function for when all questions being answered\n\n\nfunction handleEndGame() {\n  let remark = null;\n  let remarkColor = null; // condition check for player remark and remark color\n\n  if (playerScore <= 3) {\n    remark = \"Bad Grades, Keep Practicing.\";\n    remarkColor = \"red\";\n  } else if (playerScore >= 4 && playerScore < 7) {\n    remark = \"Average Grades, You can do better.\";\n    remarkColor = \"orange\";\n  } else if (playerScore >= 7) {\n    remark = \"Excellent, Keep the good work going.\";\n    remarkColor = \"green\";\n  }\n\n  const playerGrade = playerScore / 10 * 100; //data to display to score board\n\n  document.getElementById('remarks').innerHTML = remark;\n  document.getElementById('remarks').style.color = remarkColor;\n  document.getElementById('grade-percentage').innerHTML = playerGrade;\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt;\n  document.getElementById('right-answers').innerHTML = playerScore;\n  document.getElementById('score-modal').style.display = \"flex\";\n} //closes score modal, resets game and reshuffles questions\n\n\nfunction closeScoreModal() {\n  questionNumber = 1;\n  playerScore = 0;\n  wrongAttempt = 0;\n  indexNumber = 0;\n  shuffledQuestions = [];\n  NextQuestion(indexNumber);\n  document.getElementById('score-modal').style.display = \"none\";\n} //function to close warning modal\n\n\nfunction closeOptionModal() {\n  document.getElementById('option-modal').style.display = \"none\";\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NextQuestion\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/cApplication/create-react-app-quizz-monday/quiz-m/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","render","document","getElementById","questions","question","optionA","optionB","optionC","optionD","correctOption","shuffledQuestions","handleQuestions","length","random","Math","floor","includes","push","questionNumber","playerScore","wrongAttempt","indexNumber","NextQuestion","index","currentQuestion","innerHTML","checkForAnswer","currentQuestionAnswer","options","getElementsByName","forEach","option","value","labels","id","checked","style","display","backgroundColor","setTimeout","wrongLabelId","handleNextQuestion","unCheckRadioButtons","handleEndGame","resetOptionBackground","i","remark","remarkColor","playerGrade","color","closeScoreModal","closeOptionModal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//this would be the object shape for storing the questions  \n //you can change the questions to your own taste or even add more questions..\n const questions = [\n  {\n      question: \"How many days makes a week ?\",\n      optionA: \"10 days\",\n      optionB: \"14 days\",\n      optionC: \"5 days\",\n      optionD: \"7 days\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"How many players are allowed on a soccer pitch ?\",\n      optionA: \"10 players\",\n      optionB: \"11 players\",\n      optionC: \"9 players\",\n      optionD: \"12 players\",\n      correctOption: \"optionB\"\n  },\n\n  {\n      question: \"Who was the first President of USA ?\",\n      optionA: \"Donald Trump\",\n      optionB: \"Barack Obama\",\n      optionC: \"Abraham Lincoln\",\n      optionD: \"George Washington\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"30 days has ______ ?\",\n      optionA: \"January\",\n      optionB: \"December\",\n      optionC: \"June\",\n      optionD: \"August\",\n      correctOption: \"optionC\"\n  },\n\n  {\n      question: \"How manay hours can be found in a day ?\",\n      optionA: \"30 hours\",\n      optionB: \"38 hours\",\n      optionC: \"48 hours\",\n      optionD: \"24 hours\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"Which is the longest river in the world ?\",\n      optionA: \"River Nile\",\n      optionB: \"Long River\",\n      optionC: \"River Niger\",\n      optionD: \"Lake Chad\",\n      correctOption: \"optionA\"\n  },\n\n  {\n      question: \"_____ is the hottest Continent on Earth ?\",\n      optionA: \"Oceania\",\n      optionB: \"Antarctica\",\n      optionC: \"Africa\",\n      optionD: \"North America\",\n      correctOption: \"optionC\"\n  },\n\n  {\n      question: \"Which country is the largest in the world ?\",\n      optionA: \"Russia\",\n      optionB: \"Canada\",\n      optionC: \"Africa\",\n      optionD: \"Egypt\",\n      correctOption: \"optionA\"\n  },\n\n  {\n      question: \"Which of these numbers is an odd number ?\",\n      optionA: \"Ten\",\n      optionB: \"Twelve\",\n      optionC: \"Eight\",\n      optionD: \"Eleven\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: `\"You Can't see me\" is a popular saying by`,\n      optionA: \"Eminem\",\n      optionB: \"Bill Gates\",\n      optionC: \"Chris Brown\",\n      optionD: \"John Cena\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"Where is the world tallest building located ?\",\n      optionA: \"Africa\",\n      optionB: \"California\",\n      optionC: \"Dubai\",\n      optionD: \"Italy\",\n      correctOption: \"optionC\"\n  },\n\n  {\n      question: \"The longest river in the United Kingdom is ?\",\n      optionA: \"River Severn\",\n      optionB: \"River Mersey\",\n      optionC: \"River Trent\",\n      optionD: \"River Tweed\",\n      correctOption: \"optionA\"\n  },\n\n\n  {\n      question: \"How many permanent teeth does a dog have ?\",\n      optionA: \"38\",\n      optionB: \"42\",\n      optionC: \"40\",\n      optionD: \"36\",\n      correctOption: \"optionB\"\n  },\n\n  {\n      question: \"Which national team won the football World cup in 2018 ?\",\n      optionA: \"England\",\n      optionB: \"Brazil\",\n      optionC: \"Germany\",\n      optionD: \"France\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"Which US state was Donald Trump Born ?\",\n      optionA: \"New York\",\n      optionB: \"California\",\n      optionC: \"New Jersey\",\n      optionD: \"Los Angeles\",\n      correctOption: \"optionA\"\n  },\n\n  {\n      question: \"How man states does Nigeria have ?\",\n      optionA: \"24\",\n      optionB: \"30\",\n      optionC: \"36\",\n      optionD: \"37\",\n      correctOption: \"optionC\"\n  },\n\n  {\n      question: \"____ is the capital of Nigeria ?\",\n      optionA: \"Abuja\",\n      optionB: \"Lagos\",\n      optionC: \"Calabar\",\n      optionD: \"Kano\",\n      correctOption: \"optionA\"\n  },\n\n  {\n      question: \"Los Angeles is also known as ?\",\n      optionA: \"Angels City\",\n      optionB: \"Shining city\",\n      optionC: \"City of Angels\",\n      optionD: \"Lost Angels\",\n      correctOption: \"optionC\"\n  },\n\n  {\n      question: \"What is the capital of Germany ?\",\n      optionA: \"Georgia\",\n      optionB: \"Missouri\",\n      optionC: \"Oklahoma\",\n      optionD: \"Berlin\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"How many sides does an hexagon have ?\",\n      optionA: \"Six\",\n      optionB: \"Sevene\",\n      optionC: \"Four\",\n      optionD: \"Five\",\n      correctOption: \"optionA\"\n  },\n\n  {\n      question: \"How many planets are currently in the solar system ?\",\n      optionA: \"Eleven\",\n      optionB: \"Seven\",\n      optionC: \"Nine\",\n      optionD: \"Eight\",\n      correctOption: \"optionD\"\n  },\n\n  {\n      question: \"Which Planet is the hottest ?\",\n      optionA: \"Jupitar\",\n      optionB: \"Mercury\",\n      optionC: \"Earth\",\n      optionD: \"Venus\",\n      correctOption: \"optionB\"\n  },\n\n  {\n      question: \"where is the smallest bone in human body located?\",\n      optionA: \"Toes\",\n      optionB: \"Ears\",\n      optionC: \"Fingers\",\n      optionD: \"Nose\",\n      correctOption: \"optionB\"\n  },\n\n  {\n      question: \"How many hearts does an Octopus have ?\",\n      optionA: \"One\",\n      optionB: \"Two\",\n      optionC: \"Three\",\n      optionD: \"Four\",\n      correctOption: \"optionC\"\n  },\n\n  {\n      question: \"How many teeth does an adult human have ?\",\n      optionA: \"28\",\n      optionB: \"30\",\n      optionC: \"32\",\n      optionD: \"36\",\n      correctOption: \"optionC\"\n  }\n\n]\n\n\nlet shuffledQuestions = [] //empty array to hold shuffled selected questions out of all available questions\n\nfunction handleQuestions() { \n  //function to shuffle and push 10 questions to shuffledQuestions array\n//app would be dealing with 10questions per session\n  while (shuffledQuestions.length <= 9) {\n      const random = questions[Math.floor(Math.random() * questions.length)]\n      if (!shuffledQuestions.includes(random)) {\n          shuffledQuestions.push(random)\n      }\n  }\n}\n\n\nlet questionNumber = 1 //holds the current question number\nlet playerScore = 0  //holds the player score\nlet wrongAttempt = 0 //amount of wrong answers picked by player\nlet indexNumber = 0 //will be used in displaying next question\n\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\nfunction NextQuestion(index) {\n  handleQuestions()\n  const currentQuestion = shuffledQuestions[index]\n  document.getElementById(\"question-number\").innerHTML = questionNumber\n  document.getElementById(\"player-score\").innerHTML = playerScore\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\n\n}\n\n\nfunction checkForAnswer() {\n  const currentQuestion = shuffledQuestions[indexNumber] //gets current Question \n  const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\n  let correctOption = null\n\n  options.forEach((option) => {\n      if (option.value === currentQuestionAnswer) {\n          //get's correct's radio input with correct answer\n          correctOption = option.labels[0].id\n      }\n  })\n\n  //checking to make sure a radio input has been checked or an option being chosen\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\n      document.getElementById('option-modal').style.display = \"flex\"\n  }\n\n  //checking if checked radio button is same as answer\n  options.forEach((option) => {\n      if (option.checked === true && option.value === currentQuestionAnswer) {\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\n          playerScore++ //adding to player's score\n          indexNumber++ //adding 1 to index so has to display next question..\n          //set to delay question number till when next question loads\n          setTimeout(() => {\n              questionNumber++\n          }, 1000)\n      }\n\n      else if (option.checked && option.value !== currentQuestionAnswer) {\n          const wrongLabelId = option.labels[0].id\n          document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\n          wrongAttempt++ //adds 1 to wrong attempts \n          indexNumber++\n          //set to delay question number till when next question loads\n          setTimeout(() => {\n              questionNumber++\n          }, 1000)\n      }\n  })\n}\n\n\n\n//called when the next button is called\nfunction handleNextQuestion() {\n  checkForAnswer() //check if player picked right or wrong option\n  unCheckRadioButtons()\n  //delays next question displaying for a second just for some effects so questions don't rush in on player\n  setTimeout(() => {\n      if (indexNumber <= 9) {\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\n          NextQuestion(indexNumber)\n      }\n      else {\n          handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\n      }\n      resetOptionBackground()\n  }, 1000);\n}\n\n//sets options background back to null after display the right/wrong colors\nfunction resetOptionBackground() {\n  const options = document.getElementsByName(\"option\");\n  options.forEach((option) => {\n      document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\n  })\n}\n\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\nfunction unCheckRadioButtons() {\n  const options = document.getElementsByName(\"option\");\n  for (let i = 0; i < options.length; i++) {\n      options[i].checked = false;\n  }\n}\n\n// function for when all questions being answered\nfunction handleEndGame() {\n  let remark = null\n  let remarkColor = null\n\n  // condition check for player remark and remark color\n  if (playerScore <= 3) {\n      remark = \"Bad Grades, Keep Practicing.\"\n      remarkColor = \"red\"\n  }\n  else if (playerScore >= 4 && playerScore < 7) {\n      remark = \"Average Grades, You can do better.\"\n      remarkColor = \"orange\"\n  }\n  else if (playerScore >= 7) {\n      remark = \"Excellent, Keep the good work going.\"\n      remarkColor = \"green\"\n  }\n  const playerGrade = (playerScore / 10) * 100\n\n  //data to display to score board\n  document.getElementById('remarks').innerHTML = remark\n  document.getElementById('remarks').style.color = remarkColor\n  document.getElementById('grade-percentage').innerHTML = playerGrade\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt\n  document.getElementById('right-answers').innerHTML = playerScore\n  document.getElementById('score-modal').style.display = \"flex\"\n\n}\n\n//closes score modal, resets game and reshuffles questions\nfunction closeScoreModal() {\n  questionNumber = 1\n  playerScore = 0\n  wrongAttempt = 0\n  indexNumber = 0\n  shuffledQuestions = []\n  NextQuestion(indexNumber)\n  document.getElementById('score-modal').style.display = \"none\"\n}\n\n//function to close warning modal\nfunction closeOptionModal() {\n  document.getElementById('option-modal').style.display = \"none\"\n}"]},"metadata":{},"sourceType":"module"}