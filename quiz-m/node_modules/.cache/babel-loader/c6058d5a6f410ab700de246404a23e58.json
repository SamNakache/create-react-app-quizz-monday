{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\ndocument.addEventListener('readystatechange', event => {\n  if (event.target.readyState === \"complete\") {\n    countDown();\n    getData();\n    NextQuestion();\n  }\n});\ndocument.getElementById(\"option-one-label\").addEventListener(\"click\", function () {\n  checkAnswer(\"optionA\");\n});\ndocument.getElementById(\"option-two-label\").addEventListener(\"click\", function () {\n  checkAnswer(\"optionB\");\n});\ndocument.getElementById(\"option-three-label\").addEventListener(\"click\", function () {\n  checkAnswer(\"optionC\");\n});\ndocument.getElementById(\"option-four-label\").addEventListener(\"click\", function () {\n  checkAnswer(\"optionD\");\n});\n\nfunction test(index) {\n  alert(index);\n}\n\nconst questions = [{\n  question: \"How many days makes a week ?\",\n  optionA: \"10 days\",\n  optionB: \"14 days\",\n  optionC: \"5 days\",\n  optionD: \"7 days\",\n  correctOption: \"optionD\"\n}];\nlet questionNumber = 1; //holds the current question number\n\nlet playerScore = 0; //holds the player score\n\nlet wrongAttempt = 0; //amount of wrong answers picked by player\n\nlet indexNumber = 0; //will be used in displaying next question\n\nlet currentQuestion = questions[0];\nconst dataQuestions = []; // function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\n\nfunction NextQuestion() {\n  //handleQuestions()\n  //document.getElementById(\"player-score\").innerHTML = playerScore\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\n}\n\n_c = NextQuestion;\n\nfunction checkAnswer(option) {\n  if (option == currentQuestion.correctOption) playerScore += 10;\n  document.getElementById(\"player-score\").innerHTML = playerScore;\n}\n\nfunction countDown() {\n  var countDownDate = addMinutes(new Date().getTime(), 1); // Update the count down every 1 second\n\n  var x = setInterval(function () {\n    // Get today's date and time\n    var now = new Date().getTime(); // Find the distance between now and the count down date\n\n    var distance = countDownDate - now; // Time calculations for days, hours, minutes and seconds\n\n    var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n    var seconds = Math.floor(distance % (1000 * 60) / 1000);\n    minutes = minutes.toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    });\n    seconds = seconds.toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    }); // Display the result in the element with id=\"demo\"\n\n    document.getElementById(\"remaining-time\").innerHTML = minutes + \":\" + seconds; // If the count down is finished, write some text\n\n    if (distance < 0) {\n      clearInterval(x);\n      document.getElementById(\"remaining-time\").innerHTML = \"EXPIRED\";\n    }\n  }, 1000);\n}\n\nfunction addMinutes(date, minutes) {\n  return new Date(date + minutes * 60000);\n}\n\nfunction getData() {\n  var getJSON = function (url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'json';\n\n    xhr.onload = function () {\n      var status = xhr.status;\n\n      if (status == 200) {\n        callback(null, xhr.response);\n      } else {\n        callback(status);\n      }\n    };\n\n    xhr.send();\n  };\n\n  getJSON('https://opentdb.com/api.php?amount=100', function (err, data) {\n    if (err != null) {\n      console.error(err);\n    } else {\n      /*\r\n      data.forEach(q => {\r\n      const newQuestion = {\r\n      question: q.question,\r\n      optionA: q.correct_answer,\r\n      optionB: q.incorrect_answers[0],\r\n      optionC: q.incorrect_answers[1],\r\n      optionD: q.incorrect_answers[2],\r\n      correctOption: q.correct_answer\r\n      }\r\n        console.log(newQuestion.question)\r\n        dataQuestions.push(newQuestion);\r\n          });*/\n    }\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NextQuestion\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/cApplication/create-react-app-quizz-monday/quiz-m/src/index.js"],"names":["React","ReactDOM","App","document","addEventListener","event","target","readyState","countDown","getData","NextQuestion","getElementById","checkAnswer","test","index","alert","questions","question","optionA","optionB","optionC","optionD","correctOption","questionNumber","playerScore","wrongAttempt","indexNumber","currentQuestion","dataQuestions","innerHTML","option","countDownDate","addMinutes","Date","getTime","x","setInterval","now","distance","minutes","Math","floor","seconds","toLocaleString","minimumIntegerDigits","useGrouping","clearInterval","date","getJSON","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","err","data","console","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CC,KAAK,IAAI;AACrD,MAAIA,KAAK,CAACC,MAAN,CAAaC,UAAb,KAA4B,UAAhC,EAA4C;AAC1CC,IAAAA,SAAS;AACTC,IAAAA,OAAO;AACPC,IAAAA,YAAY;AACb;AACF,CAND;AAQAP,QAAQ,CAACQ,cAAT,CAAwB,kBAAxB,EAA4CP,gBAA5C,CAA6D,OAA7D,EAAsE,YAAU;AAAEQ,EAAAA,WAAW,CAAC,SAAD,CAAX;AAAyB,CAA3G;AACAT,QAAQ,CAACQ,cAAT,CAAwB,kBAAxB,EAA4CP,gBAA5C,CAA6D,OAA7D,EAAsE,YAAU;AAAEQ,EAAAA,WAAW,CAAC,SAAD,CAAX;AAAyB,CAA3G;AACAT,QAAQ,CAACQ,cAAT,CAAwB,oBAAxB,EAA8CP,gBAA9C,CAA+D,OAA/D,EAAwE,YAAU;AAAEQ,EAAAA,WAAW,CAAC,SAAD,CAAX;AAAyB,CAA7G;AACAT,QAAQ,CAACQ,cAAT,CAAwB,mBAAxB,EAA6CP,gBAA7C,CAA8D,OAA9D,EAAuE,YAAU;AAAEQ,EAAAA,WAAW,CAAC,SAAD,CAAX;AAAyB,CAA5G;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAClBC,EAAAA,KAAK,CAACD,KAAD,CAAL;AACD;;AAGD,MAAME,SAAS,GAAG,CAChB;AACIC,EAAAA,QAAQ,EAAE,8BADd;AAEIC,EAAAA,OAAO,EAAE,SAFb;AAGIC,EAAAA,OAAO,EAAE,SAHb;AAIIC,EAAAA,OAAO,EAAE,QAJb;AAKIC,EAAAA,OAAO,EAAE,QALb;AAMIC,EAAAA,aAAa,EAAE;AANnB,CADgB,CAAlB;AAWA,IAAIC,cAAc,GAAG,CAArB,C,CAAuB;;AACvB,IAAIC,WAAW,GAAG,CAAlB,C,CAAqB;;AACrB,IAAIC,YAAY,GAAG,CAAnB,C,CAAqB;;AACrB,IAAIC,WAAW,GAAG,CAAlB,C,CAAoB;;AACpB,IAAIC,eAAe,GAAGX,SAAS,CAAC,CAAD,CAA/B;AACA,MAAMY,aAAa,GAAG,EAAtB,C,CAEA;AACA;;AACA,SAASlB,YAAT,GAAwB;AACtB;AACA;AACAP,EAAAA,QAAQ,CAACQ,cAAT,CAAwB,kBAAxB,EAA4CkB,SAA5C,GAAwDF,eAAe,CAACV,QAAxE;AACAd,EAAAA,QAAQ,CAACQ,cAAT,CAAwB,kBAAxB,EAA4CkB,SAA5C,GAAwDF,eAAe,CAACT,OAAxE;AACAf,EAAAA,QAAQ,CAACQ,cAAT,CAAwB,kBAAxB,EAA4CkB,SAA5C,GAAwDF,eAAe,CAACR,OAAxE;AACAhB,EAAAA,QAAQ,CAACQ,cAAT,CAAwB,oBAAxB,EAA8CkB,SAA9C,GAA0DF,eAAe,CAACP,OAA1E;AACAjB,EAAAA,QAAQ,CAACQ,cAAT,CAAwB,mBAAxB,EAA6CkB,SAA7C,GAAyDF,eAAe,CAACN,OAAzE;AACD;;KARQX,Y;;AAUT,SAASE,WAAT,CAAqBkB,MAArB,EAA4B;AAC1B,MAAIA,MAAM,IAAIH,eAAe,CAACL,aAA9B,EACEE,WAAW,IAAI,EAAf;AACArB,EAAAA,QAAQ,CAACQ,cAAT,CAAwB,cAAxB,EAAwCkB,SAAxC,GAAoDL,WAApD;AACH;;AAGD,SAAShB,SAAT,GAAoB;AAClB,MAAIuB,aAAa,GAAGC,UAAU,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,EAAuB,CAAvB,CAA9B,CADkB,CAGpB;;AACA,MAAIC,CAAC,GAAGC,WAAW,CAAC,YAAW;AAE7B;AACA,QAAIC,GAAG,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAAV,CAH6B,CAK7B;;AACA,QAAII,QAAQ,GAAGP,aAAa,GAAGM,GAA/B,CAN6B,CAQ7B;;AACA,QAAIE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAd;AACA,QAAII,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAd;AAEAC,IAAAA,OAAO,GAAIA,OAAD,CAAUI,cAAV,CAAyB,OAAzB,EAAkC;AAACC,MAAAA,oBAAoB,EAAE,CAAvB;AAA0BC,MAAAA,WAAW,EAAC;AAAtC,KAAlC,CAAV;AACAH,IAAAA,OAAO,GAAIA,OAAD,CAAUC,cAAV,CAAyB,OAAzB,EAAkC;AAACC,MAAAA,oBAAoB,EAAE,CAAvB;AAA0BC,MAAAA,WAAW,EAAC;AAAtC,KAAlC,CAAV,CAb6B,CAe7B;;AACA1C,IAAAA,QAAQ,CAACQ,cAAT,CAAwB,gBAAxB,EAA0CkB,SAA1C,GAAsDU,OAAO,GAAG,GAAV,GAAgBG,OAAtE,CAhB6B,CAkB7B;;AACA,QAAIJ,QAAQ,GAAG,CAAf,EAAkB;AAChBQ,MAAAA,aAAa,CAACX,CAAD,CAAb;AACAhC,MAAAA,QAAQ,CAACQ,cAAT,CAAwB,gBAAxB,EAA0CkB,SAA1C,GAAsD,SAAtD;AACD;AACF,GAvBkB,EAuBhB,IAvBgB,CAAnB;AAwBC;;AAED,SAASG,UAAT,CAAoBe,IAApB,EAA0BR,OAA1B,EAAmC;AACjC,SAAO,IAAIN,IAAJ,CAASc,IAAI,GAAGR,OAAO,GAAC,KAAxB,CAAP;AACD;;AAED,SAAS9B,OAAT,GAAkB;AAEhB,MAAIuC,OAAO,GAAG,UAASC,GAAT,EAAcC,QAAd,EAAwB;AAEpC,QAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBJ,GAAhB,EAAqB,IAArB;AACAE,IAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;;AAEAH,IAAAA,GAAG,CAACI,MAAJ,GAAa,YAAW;AAEpB,UAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;;AAEA,UAAIA,MAAM,IAAI,GAAd,EAAmB;AACfN,QAAAA,QAAQ,CAAC,IAAD,EAAOC,GAAG,CAACM,QAAX,CAAR;AACH,OAFD,MAEO;AACHP,QAAAA,QAAQ,CAACM,MAAD,CAAR;AACH;AACJ,KATD;;AAWAL,IAAAA,GAAG,CAACO,IAAJ;AACH,GAlBC;;AAoBFV,EAAAA,OAAO,CAAC,wCAAD,EAA4C,UAASW,GAAT,EAAcC,IAAd,EAAoB;AAEnE,QAAID,GAAG,IAAI,IAAX,EAAiB;AACbE,MAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACH,KAFD,MAEO;AAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIK;AACJ,GArBM,CAAP;AAuBC","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\ndocument.addEventListener('readystatechange', event => { \r\n  if (event.target.readyState === \"complete\") {\r\n    countDown();\r\n    getData();\r\n    NextQuestion();\r\n  }\r\n});\r\n\r\ndocument.getElementById(\"option-one-label\").addEventListener(\"click\", function(){ checkAnswer(\"optionA\"); });\r\ndocument.getElementById(\"option-two-label\").addEventListener(\"click\", function(){ checkAnswer(\"optionB\"); });\r\ndocument.getElementById(\"option-three-label\").addEventListener(\"click\", function(){ checkAnswer(\"optionC\"); });\r\ndocument.getElementById(\"option-four-label\").addEventListener(\"click\", function(){ checkAnswer(\"optionD\"); });\r\n\r\nfunction test(index){\r\n  alert(index)\r\n}\r\n\r\n\r\nconst questions = [\r\n  {\r\n      question: \"How many days makes a week ?\",\r\n      optionA: \"10 days\",\r\n      optionB: \"14 days\",\r\n      optionC: \"5 days\",\r\n      optionD: \"7 days\",\r\n      correctOption: \"optionD\"\r\n  }\r\n]\r\n\r\nlet questionNumber = 1 //holds the current question number\r\nlet playerScore = 0  //holds the player score\r\nlet wrongAttempt = 0 //amount of wrong answers picked by player\r\nlet indexNumber = 0 //will be used in displaying next question\r\nlet currentQuestion = questions[0]\r\nconst dataQuestions = [];\r\n\r\n// function for displaying next question in the array to dom\r\n//also handles displaying players and quiz information to dom\r\nfunction NextQuestion() {\r\n  //handleQuestions()\r\n  //document.getElementById(\"player-score\").innerHTML = playerScore\r\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\r\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\r\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\r\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\r\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\r\n}\r\n\r\nfunction checkAnswer(option){\r\n  if (option == currentQuestion.correctOption)\r\n    playerScore += 10;\r\n    document.getElementById(\"player-score\").innerHTML = playerScore\r\n}\r\n\r\n\r\nfunction countDown(){\r\n  var countDownDate = addMinutes(new Date().getTime(), 1)\r\n\r\n// Update the count down every 1 second\r\nvar x = setInterval(function() {\r\n\r\n  // Get today's date and time\r\n  var now = new Date().getTime();\r\n\r\n  // Find the distance between now and the count down date\r\n  var distance = countDownDate - now;\r\n\r\n  // Time calculations for days, hours, minutes and seconds\r\n  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n  var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n  minutes = (minutes).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})\r\n  seconds = (seconds).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})\r\n\r\n  // Display the result in the element with id=\"demo\"\r\n  document.getElementById(\"remaining-time\").innerHTML = minutes + \":\" + seconds;\r\n\r\n  // If the count down is finished, write some text\r\n  if (distance < 0) {\r\n    clearInterval(x);\r\n    document.getElementById(\"remaining-time\").innerHTML = \"EXPIRED\";\r\n  }\r\n}, 1000);\r\n}\r\n\r\nfunction addMinutes(date, minutes) {\r\n  return new Date(date + minutes*60000);\r\n}\r\n\r\nfunction getData(){\r\n\r\n  var getJSON = function(url, callback) {\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, true);\r\n    xhr.responseType = 'json';\r\n\r\n    xhr.onload = function() {\r\n\r\n        var status = xhr.status;\r\n\r\n        if (status == 200) {\r\n            callback(null, xhr.response);\r\n        } else {\r\n            callback(status);\r\n        }\r\n    };\r\n\r\n    xhr.send();\r\n};\r\n\r\ngetJSON('https://opentdb.com/api.php?amount=100',  function(err, data) {\r\n\r\n    if (err != null) {\r\n        console.error(err);\r\n    } else {/*\r\n      data.forEach(q => {\r\n        const newQuestion = {\r\n          question: q.question,\r\n          optionA: q.correct_answer,\r\n          optionB: q.incorrect_answers[0],\r\n          optionC: q.incorrect_answers[1],\r\n          optionD: q.incorrect_answers[2],\r\n          correctOption: q.correct_answer\r\n        }\r\n    \r\n        console.log(newQuestion.question)\r\n    \r\n        dataQuestions.push(newQuestion);\r\n        \r\n      });*/\r\n    }\r\n});\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}