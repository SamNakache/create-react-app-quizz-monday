{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\ndocument.addEventListener('readystatechange', event => {\n  if (event.target.readyState === \"complete\") {\n    test();\n  }\n});\n\nfunction test() {\n  alert('test2');\n}\n\nconst questions = [{\n  question: \"How many days makes a week ?\",\n  optionA: \"10 days\",\n  optionB: \"14 days\",\n  optionC: \"5 days\",\n  optionD: \"7 days\",\n  correctOption: \"optionD\"\n}];\nlet shuffledQuestions = []; //empty array to hold shuffled selected questions out of all available questions\n\nfunction handleQuestions() {\n  //function to shuffle and push 10 questions to shuffledQuestions array\n  //app would be dealing with 10questions per session\n  while (shuffledQuestions.length <= 9) {\n    const random = questions[Math.floor(Math.random() * questions.length)];\n\n    if (!shuffledQuestions.includes(random)) {\n      shuffledQuestions.push(random);\n    }\n  }\n}\n\nlet questionNumber = 1; //holds the current question number\n\nlet playerScore = 0; //holds the player score\n\nlet wrongAttempt = 0; //amount of wrong answers picked by player\n\nlet indexNumber = 0; //will be used in displaying next question\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\n\nfunction NextQuestion(index) {\n  handleQuestions();\n  const currentQuestion = shuffledQuestions[index];\n  document.getElementById(\"question-number\").innerHTML = questionNumber;\n  document.getElementById(\"player-score\").innerHTML = playerScore;\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\n}\n/*\r\n\r\nfunction checkForAnswer() {\r\n  const currentQuestion = shuffledQuestions[indexNumber] //gets current Question \r\n  const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer\r\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\r\n  let correctOption = null\r\n\r\n  options.forEach((option) => {\r\n      if (option.value === currentQuestionAnswer) {\r\n          //get's correct's radio input with correct answer\r\n          correctOption = option.labels[0].id\r\n      }\r\n  })\r\n\r\n  //checking to make sure a radio input has been checked or an option being chosen\r\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\r\n      document.getElementById('option-modal').style.display = \"flex\"\r\n  }\r\n\r\n  //checking if checked radio button is same as answer\r\n  options.forEach((option) => {\r\n      if (option.checked === true && option.value === currentQuestionAnswer) {\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          playerScore++ //adding to player's score\r\n          indexNumber++ //adding 1 to index so has to display next question..\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n\r\n      else if (option.checked && option.value !== currentQuestionAnswer) {\r\n          const wrongLabelId = option.labels[0].id\r\n          document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          wrongAttempt++ //adds 1 to wrong attempts \r\n          indexNumber++\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n  })\r\n}\r\n\r\n\r\n\r\n//called when the next button is called\r\nfunction handleNextQuestion() {\r\n  checkForAnswer() //check if player picked right or wrong option\r\n  unCheckRadioButtons()\r\n  //delays next question displaying for a second just for some effects so questions don't rush in on player\r\n  setTimeout(() => {\r\n      if (indexNumber <= 9) {\r\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\r\n          NextQuestion(indexNumber)\r\n      }\r\n      else {\r\n          handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\r\n      }\r\n      resetOptionBackground()\r\n  }, 1000);\r\n}\r\n\r\n//sets options background back to null after display the right/wrong colors\r\nfunction resetOptionBackground() {\r\n  const options = document.getElementsByName(\"option\");\r\n  options.forEach((option) => {\r\n      document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\r\n  })\r\n}\r\n\r\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\r\nfunction unCheckRadioButtons() {\r\n  const options = document.getElementsByName(\"option\");\r\n  for (let i = 0; i < options.length; i++) {\r\n      options[i].checked = false;\r\n  }\r\n}\r\n\r\n// function for when all questions being answered\r\nfunction handleEndGame() {\r\n  let remark = null\r\n  let remarkColor = null\r\n\r\n  // condition check for player remark and remark color\r\n  if (playerScore <= 3) {\r\n      remark = \"Bad Grades, Keep Practicing.\"\r\n      remarkColor = \"red\"\r\n  }\r\n  else if (playerScore >= 4 && playerScore < 7) {\r\n      remark = \"Average Grades, You can do better.\"\r\n      remarkColor = \"orange\"\r\n  }\r\n  else if (playerScore >= 7) {\r\n      remark = \"Excellent, Keep the good work going.\"\r\n      remarkColor = \"green\"\r\n  }\r\n  const playerGrade = (playerScore / 10) * 100\r\n\r\n  //data to display to score board\r\n  document.getElementById('remarks').innerHTML = remark\r\n  document.getElementById('remarks').style.color = remarkColor\r\n  document.getElementById('grade-percentage').innerHTML = playerGrade\r\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt\r\n  document.getElementById('right-answers').innerHTML = playerScore\r\n  document.getElementById('score-modal').style.display = \"flex\"\r\n\r\n}\r\n\r\n//closes score modal, resets game and reshuffles questions\r\nfunction closeScoreModal() {\r\n  questionNumber = 1\r\n  playerScore = 0\r\n  wrongAttempt = 0\r\n  indexNumber = 0\r\n  shuffledQuestions = []\r\n  NextQuestion(indexNumber)\r\n  document.getElementById('score-modal').style.display = \"none\"\r\n}\r\n\r\n//function to close warning modal\r\nfunction closeOptionModal() {\r\n  document.getElementById('option-modal').style.display = \"none\"\r\n}*/\n\n\n_c = NextQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"NextQuestion\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/cApplication/create-react-app-quizz-monday/quiz-m/src/index.js"],"names":["React","ReactDOM","App","document","addEventListener","event","target","readyState","test","alert","questions","question","optionA","optionB","optionC","optionD","correctOption","shuffledQuestions","handleQuestions","length","random","Math","floor","includes","push","questionNumber","playerScore","wrongAttempt","indexNumber","NextQuestion","index","currentQuestion","getElementById","innerHTML"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CC,KAAK,IAAI;AACrD,MAAIA,KAAK,CAACC,MAAN,CAAaC,UAAb,KAA4B,UAAhC,EAA4C;AAC1CC,IAAAA,IAAI;AACL;AACF,CAJD;;AAMA,SAASA,IAAT,GAAe;AACbC,EAAAA,KAAK,CAAC,OAAD,CAAL;AACD;;AAED,MAAMC,SAAS,GAAG,CAChB;AACIC,EAAAA,QAAQ,EAAE,8BADd;AAEIC,EAAAA,OAAO,EAAE,SAFb;AAGIC,EAAAA,OAAO,EAAE,SAHb;AAIIC,EAAAA,OAAO,EAAE,QAJb;AAKIC,EAAAA,OAAO,EAAE,QALb;AAMIC,EAAAA,aAAa,EAAE;AANnB,CADgB,CAAlB;AAYA,IAAIC,iBAAiB,GAAG,EAAxB,C,CAA2B;;AAE3B,SAASC,eAAT,GAA2B;AACzB;AACF;AACE,SAAOD,iBAAiB,CAACE,MAAlB,IAA4B,CAAnC,EAAsC;AAClC,UAAMC,MAAM,GAAGV,SAAS,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBV,SAAS,CAACS,MAArC,CAAD,CAAxB;;AACA,QAAI,CAACF,iBAAiB,CAACM,QAAlB,CAA2BH,MAA3B,CAAL,EAAyC;AACrCH,MAAAA,iBAAiB,CAACO,IAAlB,CAAuBJ,MAAvB;AACH;AACJ;AACF;;AAGD,IAAIK,cAAc,GAAG,CAArB,C,CAAuB;;AACvB,IAAIC,WAAW,GAAG,CAAlB,C,CAAqB;;AACrB,IAAIC,YAAY,GAAG,CAAnB,C,CAAqB;;AACrB,IAAIC,WAAW,GAAG,CAAlB,C,CAAoB;AAEpB;AACA;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BZ,EAAAA,eAAe;AACf,QAAMa,eAAe,GAAGd,iBAAiB,CAACa,KAAD,CAAzC;AACA3B,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,iBAAxB,EAA2CC,SAA3C,GAAuDR,cAAvD;AACAtB,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoDP,WAApD;AACAvB,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDF,eAAe,CAACpB,QAAxE;AACAR,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDF,eAAe,CAACnB,OAAxE;AACAT,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDF,eAAe,CAAClB,OAAxE;AACAV,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,oBAAxB,EAA8CC,SAA9C,GAA0DF,eAAe,CAACjB,OAA1E;AACAX,EAAAA,QAAQ,CAAC6B,cAAT,CAAwB,mBAAxB,EAA6CC,SAA7C,GAAyDF,eAAe,CAAChB,OAAzzISc,Y","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\ndocument.addEventListener('readystatechange', event => { \r\n  if (event.target.readyState === \"complete\") {\r\n    test();\r\n  }\r\n});\r\n\r\nfunction test(){\r\n  alert('test2')\r\n}\r\n\r\nconst questions = [\r\n  {\r\n      question: \"How many days makes a week ?\",\r\n      optionA: \"10 days\",\r\n      optionB: \"14 days\",\r\n      optionC: \"5 days\",\r\n      optionD: \"7 days\",\r\n      correctOption: \"optionD\"\r\n  }\r\n]\r\n\r\n\r\nlet shuffledQuestions = [] //empty array to hold shuffled selected questions out of all available questions\r\n\r\nfunction handleQuestions() { \r\n  //function to shuffle and push 10 questions to shuffledQuestions array\r\n//app would be dealing with 10questions per session\r\n  while (shuffledQuestions.length <= 9) {\r\n      const random = questions[Math.floor(Math.random() * questions.length)]\r\n      if (!shuffledQuestions.includes(random)) {\r\n          shuffledQuestions.push(random)\r\n      }\r\n  }\r\n}\r\n\r\n\r\nlet questionNumber = 1 //holds the current question number\r\nlet playerScore = 0  //holds the player score\r\nlet wrongAttempt = 0 //amount of wrong answers picked by player\r\nlet indexNumber = 0 //will be used in displaying next question\r\n\r\n// function for displaying next question in the array to dom\r\n//also handles displaying players and quiz information to dom\r\nfunction NextQuestion(index) {\r\n  handleQuestions()\r\n  const currentQuestion = shuffledQuestions[index]\r\n  document.getElementById(\"question-number\").innerHTML = questionNumber\r\n  document.getElementById(\"player-score\").innerHTML = playerScore\r\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\r\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\r\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\r\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\r\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\r\n\r\n}\r\n/*\r\n\r\nfunction checkForAnswer() {\r\n  const currentQuestion = shuffledQuestions[indexNumber] //gets current Question \r\n  const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer\r\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\r\n  let correctOption = null\r\n\r\n  options.forEach((option) => {\r\n      if (option.value === currentQuestionAnswer) {\r\n          //get's correct's radio input with correct answer\r\n          correctOption = option.labels[0].id\r\n      }\r\n  })\r\n\r\n  //checking to make sure a radio input has been checked or an option being chosen\r\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\r\n      document.getElementById('option-modal').style.display = \"flex\"\r\n  }\r\n\r\n  //checking if checked radio button is same as answer\r\n  options.forEach((option) => {\r\n      if (option.checked === true && option.value === currentQuestionAnswer) {\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          playerScore++ //adding to player's score\r\n          indexNumber++ //adding 1 to index so has to display next question..\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n\r\n      else if (option.checked && option.value !== currentQuestionAnswer) {\r\n          const wrongLabelId = option.labels[0].id\r\n          document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          wrongAttempt++ //adds 1 to wrong attempts \r\n          indexNumber++\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n  })\r\n}\r\n\r\n\r\n\r\n//called when the next button is called\r\nfunction handleNextQuestion() {\r\n  checkForAnswer() //check if player picked right or wrong option\r\n  unCheckRadioButtons()\r\n  //delays next question displaying for a second just for some effects so questions don't rush in on player\r\n  setTimeout(() => {\r\n      if (indexNumber <= 9) {\r\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\r\n          NextQuestion(indexNumber)\r\n      }\r\n      else {\r\n          handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\r\n      }\r\n      resetOptionBackground()\r\n  }, 1000);\r\n}\r\n\r\n//sets options background back to null after display the right/wrong colors\r\nfunction resetOptionBackground() {\r\n  const options = document.getElementsByName(\"option\");\r\n  options.forEach((option) => {\r\n      document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\r\n  })\r\n}\r\n\r\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\r\nfunction unCheckRadioButtons() {\r\n  const options = document.getElementsByName(\"option\");\r\n  for (let i = 0; i < options.length; i++) {\r\n      options[i].checked = false;\r\n  }\r\n}\r\n\r\n// function for when all questions being answered\r\nfunction handleEndGame() {\r\n  let remark = null\r\n  let remarkColor = null\r\n\r\n  // condition check for player remark and remark color\r\n  if (playerScore <= 3) {\r\n      remark = \"Bad Grades, Keep Practicing.\"\r\n      remarkColor = \"red\"\r\n  }\r\n  else if (playerScore >= 4 && playerScore < 7) {\r\n      remark = \"Average Grades, You can do better.\"\r\n      remarkColor = \"orange\"\r\n  }\r\n  else if (playerScore >= 7) {\r\n      remark = \"Excellent, Keep the good work going.\"\r\n      remarkColor = \"green\"\r\n  }\r\n  const playerGrade = (playerScore / 10) * 100\r\n\r\n  //data to display to score board\r\n  document.getElementById('remarks').innerHTML = remark\r\n  document.getElementById('remarks').style.color = remarkColor\r\n  document.getElementById('grade-percentage').innerHTML = playerGrade\r\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt\r\n  document.getElementById('right-answers').innerHTML = playerScore\r\n  document.getElementById('score-modal').style.display = \"flex\"\r\n\r\n}\r\n\r\n//closes score modal, resets game and reshuffles questions\r\nfunction closeScoreModal() {\r\n  questionNumber = 1\r\n  playerScore = 0\r\n  wrongAttempt = 0\r\n  indexNumber = 0\r\n  shuffledQuestions = []\r\n  NextQuestion(indexNumber)\r\n  document.getElementById('score-modal').style.display = \"none\"\r\n}\r\n\r\n//function to close warning modal\r\nfunction closeOptionModal() {\r\n  document.getElementById('option-modal').style.display = \"none\"\r\n}*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}