{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\ndocument.addEventListener('readystatechange', event => {\n  if (event.target.readyState === \"complete\") {\n    countDown();\n    NextQuestion();\n  }\n});\nconst questions = [{\n  question: \"How many days makes a week ?\",\n  optionA: \"10 days\",\n  optionB: \"14 days\",\n  optionC: \"5 days\",\n  optionD: \"7 days\",\n  correctOption: \"optionD\"\n}];\n/*\r\nfunction handleQuestions() { \r\n  //function to shuffle and push 10 questions to shuffledQuestions array\r\n//app would be dealing with 10questions per session\r\n  while (shuffledQuestions.length <= 9) {\r\n      const random = questions[Math.floor(Math.random() * questions.length)]\r\n      if (!shuffledQuestions.includes(random)) {\r\n          shuffledQuestions.push(random)\r\n      }\r\n  }\r\n}*/\n\nlet questionNumber = 1; //holds the current question number\n\nlet playerScore = 0; //holds the player score\n\nlet wrongAttempt = 0; //amount of wrong answers picked by player\n\nlet indexNumber = 0; //will be used in displaying next question\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\n\nfunction NextQuestion() {\n  //handleQuestions()\n  const currentQuestion = questions[0]; //document.getElementById(\"player-score\").innerHTML = playerScore\n\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD; //document.getElementById(\"remaining-time\").innerHTML = new Date.getTime();\n}\n\n_c = NextQuestion;\n\nfunction countDown() {\n  var countDownDate = addMinutes(new Date().getTime(), 1); // Update the count down every 1 second\n\n  var x = setInterval(function () {\n    // Get today's date and time\n    var now = new Date().getTime(); // Find the distance between now and the count down date\n\n    var distance = countDownDate - now; // Time calculations for days, hours, minutes and seconds\n\n    var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n    var seconds = Math.floor(distance % (1000 * 60) / 1000); // Display the result in the element with id=\"demo\"\n\n    document.getElementById(\"remaining-time\").innerHTML = minutes + \":\" + seconds; // If the count down is finished, write some text\n\n    if (distance < 0) {\n      clearInterval(x);\n      document.getElementById(\"remaining-time\").innerHTML = \"EXPIRED\";\n    }\n  }, 1000);\n}\n\nfunction addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * 60000);\n}\n/*\r\n\r\nfunction checkForAnswer() {\r\n  const currentQuestion = shuffledQuestions[indexNumber] //gets current Question \r\n  const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer\r\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\r\n  let correctOption = null\r\n\r\n  options.forEach((option) => {\r\n      if (option.value === currentQuestionAnswer) {\r\n          //get's correct's radio input with correct answer\r\n          correctOption = option.labels[0].id\r\n      }\r\n  })\r\n\r\n  //checking to make sure a radio input has been checked or an option being chosen\r\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\r\n      document.getElementById('option-modal').style.display = \"flex\"\r\n  }\r\n\r\n  //checking if checked radio button is same as answer\r\n  options.forEach((option) => {\r\n      if (option.checked === true && option.value === currentQuestionAnswer) {\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          playerScore++ //adding to player's score\r\n          indexNumber++ //adding 1 to index so has to display next question..\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n\r\n      else if (option.checked && option.value !== currentQuestionAnswer) {\r\n          const wrongLabelId = option.labels[0].id\r\n          document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          wrongAttempt++ //adds 1 to wrong attempts \r\n          indexNumber++\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n  })\r\n}\r\n\r\n\r\n\r\n//called when the next button is called\r\nfunction handleNextQuestion() {\r\n  checkForAnswer() //check if player picked right or wrong option\r\n  unCheckRadioButtons()\r\n  //delays next question displaying for a second just for some effects so questions don't rush in on player\r\n  setTimeout(() => {\r\n      if (indexNumber <= 9) {\r\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\r\n          NextQuestion(indexNumber)\r\n      }\r\n      else {\r\n          handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\r\n      }\r\n      resetOptionBackground()\r\n  }, 1000);\r\n}\r\n\r\n//sets options background back to null after display the right/wrong colors\r\nfunction resetOptionBackground() {\r\n  const options = document.getElementsByName(\"option\");\r\n  options.forEach((option) => {\r\n      document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\r\n  })\r\n}\r\n\r\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\r\nfunction unCheckRadioButtons() {\r\n  const options = document.getElementsByName(\"option\");\r\n  for (let i = 0; i < options.length; i++) {\r\n      options[i].checked = false;\r\n  }\r\n}\r\n\r\n// function for when all questions being answered\r\nfunction handleEndGame() {\r\n  let remark = null\r\n  let remarkColor = null\r\n\r\n  // condition check for player remark and remark color\r\n  if (playerScore <= 3) {\r\n      remark = \"Bad Grades, Keep Practicing.\"\r\n      remarkColor = \"red\"\r\n  }\r\n  else if (playerScore >= 4 && playerScore < 7) {\r\n      remark = \"Average Grades, You can do better.\"\r\n      remarkColor = \"orange\"\r\n  }\r\n  else if (playerScore >= 7) {\r\n      remark = \"Excellent, Keep the good work going.\"\r\n      remarkColor = \"green\"\r\n  }\r\n  const playerGrade = (playerScore / 10) * 100\r\n\r\n  //data to display to score board\r\n  document.getElementById('remarks').innerHTML = remark\r\n  document.getElementById('remarks').style.color = remarkColor\r\n  document.getElementById('grade-percentage').innerHTML = playerGrade\r\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt\r\n  document.getElementById('right-answers').innerHTML = playerScore\r\n  document.getElementById('score-modal').style.display = \"flex\"\r\n\r\n}\r\n\r\n//closes score modal, resets game and reshuffles questions\r\nfunction closeScoreModal() {\r\n  questionNumber = 1\r\n  playerScore = 0\r\n  wrongAttempt = 0\r\n  indexNumber = 0\r\n  shuffledQuestions = []\r\n  NextQuestion(indexNumber)\r\n  document.getElementById('score-modal').style.display = \"none\"\r\n}\r\n\r\n//function to close warning modal\r\nfunction closeOptionModal() {\r\n  document.getElementById('option-modal').style.display = \"none\"\r\n}*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"NextQuestion\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/cApplication/create-react-app-quizz-monday/quiz-m/src/index.js"],"names":["React","ReactDOM","App","document","addEventListener","event","target","readyState","countDown","NextQuestion","questions","question","optionA","optionB","optionC","optionD","correctOption","questionNumber","playerScore","wrongAttempt","indexNumber","currentQuestion","getElementById","innerHTML","countDownDate","addMinutes","Date","getTime","x","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","clearInterval","date"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CC,KAAK,IAAI;AACrD,MAAIA,KAAK,CAACC,MAAN,CAAaC,UAAb,KAA4B,UAAhC,EAA4C;AAC1CC,IAAAA,SAAS;AACTC,IAAAA,YAAY;AACb;AACF,CALD;AAQA,MAAMC,SAAS,GAAG,CAChB;AACIC,EAAAA,QAAQ,EAAE,8BADd;AAEIC,EAAAA,OAAO,EAAE,SAFb;AAGIC,EAAAA,OAAO,EAAE,SAHb;AAIIC,EAAAA,OAAO,EAAE,QAJb;AAKIC,EAAAA,OAAO,EAAE,QALb;AAMIC,EAAAA,aAAa,EAAE;AANnB,CADgB,CAAlB;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,cAAc,GAAG,CAArB,C,CAAuB;;AACvB,IAAIC,WAAW,GAAG,CAAlB,C,CAAqB;;AACrB,IAAIC,YAAY,GAAG,CAAnB,C,CAAqB;;AACrB,IAAIC,WAAW,GAAG,CAAlB,C,CAAoB;AAEpB;AACA;;AACA,SAASX,YAAT,GAAwB;AACtB;AACA,QAAMY,eAAe,GAAGX,SAAS,CAAC,CAAD,CAAjC,CAFsB,CAGtB;;AACAP,EAAAA,QAAQ,CAACmB,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDF,eAAe,CAACV,QAAxE;AACAR,EAAAA,QAAQ,CAACmB,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDF,eAAe,CAACT,OAAxE;AACAT,EAAAA,QAAQ,CAACmB,cAAT,CAAwB,kBAAxB,EAA4CC,SAA5C,GAAwDF,eAAe,CAACR,OAAxE;AACAV,EAAAA,QAAQ,CAACmB,cAAT,CAAwB,oBAAxB,EAA8CC,SAA9C,GAA0DF,eAAe,CAACP,OAA1E;AACAX,EAAAA,QAAQ,CAACmB,cAAT,CAAwB,mBAAxB,EAA6CC,SAA7C,GAAyDF,eAAe,CAACN,OAAzE,CARsB,CAUtB;AACD;;KAXQN,Y;;AAcT,SAASD,SAAT,GAAoB;AAClB,MAAIgB,aAAa,GAAGC,UAAU,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,EAAuB,CAAvB,CAA9B,CADkB,CAGpB;;AACA,MAAIC,CAAC,GAAGC,WAAW,CAAC,YAAW;AAE7B;AACA,QAAIC,GAAG,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAAV,CAH6B,CAK7B;;AACA,QAAII,QAAQ,GAAGP,aAAa,GAAGM,GAA/B,CAN6B,CAQ7B;;AACA,QAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CAAX;AACA,QAAII,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CAAX,CAAZ;AACA,QAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAd;AACA,QAAIM,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAd,CAZ6B,CAc7B;;AACA5B,IAAAA,QAAQ,CAACmB,cAAT,CAAwB,gBAAxB,EAA0CC,SAA1C,GAAsDa,OAAO,GAAG,GAAV,GAAgBC,OAAtE,CAf6B,CAiB7B;;AACA,QAAIN,QAAQ,GAAG,CAAf,EAAkB;AAChBO,MAAAA,aAAa,CAACV,CAAD,CAAb;AACAzB,MAAAA,QAAQ,CAACmB,cAAT,CAAwB,gBAAxB,EAA0CC,SAA1C,GAAsD,SAAtD;AACD;AACF,GAtBkB,EAsBhB,IAtBgB,CAAnB;AAuBC;;AAED,SAASE,UAAT,CAAoBc,IAApB,EAA0BH,OAA1B,EAAmC;AACjC,SAAO,IAAIV,IAAJ,CAASa,IAAI,CAACZ,OAAL,KAAiBS,OAAO,GAAC,KAAlsourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\ndocument.addEventListener('readystatechange', event => { \r\n  if (event.target.readyState === \"complete\") {\r\n    countDown();\r\n    NextQuestion();\r\n  }\r\n});\r\n\r\n\r\nconst questions = [\r\n  {\r\n      question: \"How many days makes a week ?\",\r\n      optionA: \"10 days\",\r\n      optionB: \"14 days\",\r\n      optionC: \"5 days\",\r\n      optionD: \"7 days\",\r\n      correctOption: \"optionD\"\r\n  }\r\n]\r\n\r\n\r\n/*\r\nfunction handleQuestions() { \r\n  //function to shuffle and push 10 questions to shuffledQuestions array\r\n//app would be dealing with 10questions per session\r\n  while (shuffledQuestions.length <= 9) {\r\n      const random = questions[Math.floor(Math.random() * questions.length)]\r\n      if (!shuffledQuestions.includes(random)) {\r\n          shuffledQuestions.push(random)\r\n      }\r\n  }\r\n}*/\r\n\r\n\r\nlet questionNumber = 1 //holds the current question number\r\nlet playerScore = 0  //holds the player score\r\nlet wrongAttempt = 0 //amount of wrong answers picked by player\r\nlet indexNumber = 0 //will be used in displaying next question\r\n\r\n// function for displaying next question in the array to dom\r\n//also handles displaying players and quiz information to dom\r\nfunction NextQuestion() {\r\n  //handleQuestions()\r\n  const currentQuestion = questions[0]\r\n  //document.getElementById(\"player-score\").innerHTML = playerScore\r\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\r\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\r\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\r\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\r\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\r\n\r\n  //document.getElementById(\"remaining-time\").innerHTML = new Date.getTime();\r\n}\r\n\r\n\r\nfunction countDown(){\r\n  var countDownDate = addMinutes(new Date().getTime(), 1)\r\n\r\n// Update the count down every 1 second\r\nvar x = setInterval(function() {\r\n\r\n  // Get today's date and time\r\n  var now = new Date().getTime();\r\n\r\n  // Find the distance between now and the count down date\r\n  var distance = countDownDate - now;\r\n\r\n  // Time calculations for days, hours, minutes and seconds\r\n  var days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n  var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n  // Display the result in the element with id=\"demo\"\r\n  document.getElementById(\"remaining-time\").innerHTML = minutes + \":\" + seconds;\r\n\r\n  // If the count down is finished, write some text\r\n  if (distance < 0) {\r\n    clearInterval(x);\r\n    document.getElementById(\"remaining-time\").innerHTML = \"EXPIRED\";\r\n  }\r\n}, 1000);\r\n}\r\n\r\nfunction addMinutes(date, minutes) {\r\n  return new Date(date.getTime() + minutes*60000);\r\n}\r\n/*\r\n\r\nfunction checkForAnswer() {\r\n  const currentQuestion = shuffledQuestions[indexNumber] //gets current Question \r\n  const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer\r\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\r\n  let correctOption = null\r\n\r\n  options.forEach((option) => {\r\n      if (option.value === currentQuestionAnswer) {\r\n          //get's correct's radio input with correct answer\r\n          correctOption = option.labels[0].id\r\n      }\r\n  })\r\n\r\n  //checking to make sure a radio input has been checked or an option being chosen\r\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\r\n      document.getElementById('option-modal').style.display = \"flex\"\r\n  }\r\n\r\n  //checking if checked radio button is same as answer\r\n  options.forEach((option) => {\r\n      if (option.checked === true && option.value === currentQuestionAnswer) {\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          playerScore++ //adding to player's score\r\n          indexNumber++ //adding 1 to index so has to display next question..\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n\r\n      else if (option.checked && option.value !== currentQuestionAnswer) {\r\n          const wrongLabelId = option.labels[0].id\r\n          document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          wrongAttempt++ //adds 1 to wrong attempts \r\n          indexNumber++\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n  })\r\n}\r\n\r\n\r\n\r\n//called when the next button is called\r\nfunction handleNextQuestion() {\r\n  checkForAnswer() //check if player picked right or wrong option\r\n  unCheckRadioButtons()\r\n  //delays next question displaying for a second just for some effects so questions don't rush in on player\r\n  setTimeout(() => {\r\n      if (indexNumber <= 9) {\r\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\r\n          NextQuestion(indexNumber)\r\n      }\r\n      else {\r\n          handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\r\n      }\r\n      resetOptionBackground()\r\n  }, 1000);\r\n}\r\n\r\n//sets options background back to null after display the right/wrong colors\r\nfunction resetOptionBackground() {\r\n  const options = document.getElementsByName(\"option\");\r\n  options.forEach((option) => {\r\n      document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\r\n  })\r\n}\r\n\r\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\r\nfunction unCheckRadioButtons() {\r\n  const options = document.getElementsByName(\"option\");\r\n  for (let i = 0; i < options.length; i++) {\r\n      options[i].checked = false;\r\n  }\r\n}\r\n\r\n// function for when all questions being answered\r\nfunction handleEndGame() {\r\n  let remark = null\r\n  let remarkColor = null\r\n\r\n  // condition check for player remark and remark color\r\n  if (playerScore <= 3) {\r\n      remark = \"Bad Grades, Keep Practicing.\"\r\n      remarkColor = \"red\"\r\n  }\r\n  else if (playerScore >= 4 && playerScore < 7) {\r\n      remark = \"Average Grades, You can do better.\"\r\n      remarkColor = \"orange\"\r\n  }\r\n  else if (playerScore >= 7) {\r\n      remark = \"Excellent, Keep the good work going.\"\r\n      remarkColor = \"green\"\r\n  }\r\n  const playerGrade = (playerScore / 10) * 100\r\n\r\n  //data to display to score board\r\n  document.getElementById('remarks').innerHTML = remark\r\n  document.getElementById('remarks').style.color = remarkColor\r\n  document.getElementById('grade-percentage').innerHTML = playerGrade\r\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt\r\n  document.getElementById('right-answers').innerHTML = playerScore\r\n  document.getElementById('score-modal').style.display = \"flex\"\r\n\r\n}\r\n\r\n//closes score modal, resets game and reshuffles questions\r\nfunction closeScoreModal() {\r\n  questionNumber = 1\r\n  playerScore = 0\r\n  wrongAttempt = 0\r\n  indexNumber = 0\r\n  shuffledQuestions = []\r\n  NextQuestion(indexNumber)\r\n  document.getElementById('score-modal').style.display = \"none\"\r\n}\r\n\r\n//function to close warning modal\r\nfunction closeOptionModal() {\r\n  document.getElementById('option-modal').style.display = \"none\"\r\n}*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}