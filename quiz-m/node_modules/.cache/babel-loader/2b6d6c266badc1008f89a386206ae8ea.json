{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //this would be the object shape for storing the questions  \n//you can change the questions to your own taste or even add more questions..\n\nconst questions = [{\n  question: \"How many days makes a week ?\",\n  optionA: \"10 days\",\n  optionB: \"14 days\",\n  optionC: \"5 days\",\n  optionD: \"7 days\",\n  correctOption: \"optionD\"\n}];\nlet shuffledQuestions = []; //empty array to hold shuffled selected questions out of all available questions\n\nfunction handleQuestions() {\n  //function to shuffle and push 10 questions to shuffledQuestions array\n  //app would be dealing with 10questions per session\n  while (shuffledQuestions.length <= 9) {\n    const random = questions[Math.floor(Math.random() * questions.length)];\n\n    if (!shuffledQuestions.includes(random)) {\n      shuffledQuestions.push(random);\n    }\n  }\n}\n\nlet questionNumber = 1; //holds the current question number\n\nlet playerScore = 0; //holds the player score\n\nlet wrongAttempt = 0; //amount of wrong answers picked by player\n\nlet indexNumber = 0; //will be used in displaying next question\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\n\nfunction NextQuestion(index) {\n  handleQuestions();\n  const currentQuestion = shuffledQuestions[index];\n  document.getElementById(\"question-number\").innerHTML = questionNumber;\n  document.getElementById(\"player-score\").innerHTML = playerScore;\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\n}\n\n_c = NextQuestion;\n\nfunction checkForAnswer() {\n  const currentQuestion = shuffledQuestions[indexNumber]; //gets current Question \n\n  const currentQuestionAnswer = currentQuestion.correctOption; //gets current Question's answer\n\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\n\n  let correctOption = null;\n  options.forEach(option => {\n    if (option.value === currentQuestionAnswer) {\n      //get's correct's radio input with correct answer\n      correctOption = option.labels[0].id;\n    }\n  }); //checking to make sure a radio input has been checked or an option being chosen\n\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\n    document.getElementById('option-modal').style.display = \"flex\";\n  } //checking if checked radio button is same as answer\n\n\n  options.forEach(option => {\n    if (option.checked === true && option.value === currentQuestionAnswer) {\n      document.getElementById(correctOption).style.backgroundColor = \"green\";\n      playerScore++; //adding to player's score\n\n      indexNumber++; //adding 1 to index so has to display next question..\n      //set to delay question number till when next question loads\n\n      setTimeout(() => {\n        questionNumber++;\n      }, 1000);\n    } else if (option.checked && option.value !== currentQuestionAnswer) {\n      const wrongLabelId = option.labels[0].id;\n      document.getElementById(wrongLabelId).style.backgroundColor = \"red\";\n      document.getElementById(correctOption).style.backgroundColor = \"green\";\n      wrongAttempt++; //adds 1 to wrong attempts \n\n      indexNumber++; //set to delay question number till when next question loads\n\n      setTimeout(() => {\n        questionNumber++;\n      }, 1000);\n    }\n  });\n} //called when the next button is called\n\n\nfunction handleNextQuestion() {\n  checkForAnswer(); //check if player picked right or wrong option\n\n  unCheckRadioButtons(); //delays next question displaying for a second just for some effects so questions don't rush in on player\n\n  setTimeout(() => {\n    if (indexNumber <= 9) {\n      //displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\n      NextQuestion(indexNumber);\n    } else {\n      handleEndGame(); //ends game if index number greater than 9 meaning we're already at the 10th question\n    }\n\n    resetOptionBackground();\n  }, 1000);\n} //sets options background back to null after display the right/wrong colors\n\n\nfunction resetOptionBackground() {\n  const options = document.getElementsByName(\"option\");\n  options.forEach(option => {\n    document.getElementById(option.labels[0].id).style.backgroundColor = \"\";\n  });\n} // unchecking all radio buttons for next question(can be done with map or foreach loop also)\n\n\nfunction unCheckRadioButtons() {\n  const options = document.getElementsByName(\"option\");\n\n  for (let i = 0; i < options.length; i++) {\n    options[i].checked = false;\n  }\n} // function for when all questions being answered\n\n\nfunction handleEndGame() {\n  let remark = null;\n  let remarkColor = null; // condition check for player remark and remark color\n\n  if (playerScore <= 3) {\n    remark = \"Bad Grades, Keep Practicing.\";\n    remarkColor = \"red\";\n  } else if (playerScore >= 4 && playerScore < 7) {\n    remark = \"Average Grades, You can do better.\";\n    remarkColor = \"orange\";\n  } else if (playerScore >= 7) {\n    remark = \"Excellent, Keep the good work going.\";\n    remarkColor = \"green\";\n  }\n\n  const playerGrade = playerScore / 10 * 100; //data to display to score board\n\n  document.getElementById('remarks').innerHTML = remark;\n  document.getElementById('remarks').style.color = remarkColor;\n  document.getElementById('grade-percentage').innerHTML = playerGrade;\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt;\n  document.getElementById('right-answers').innerHTML = playerScore;\n  document.getElementById('score-modal').style.display = \"flex\";\n} //closes score modal, resets game and reshuffles questions\n\n\nfunction closeScoreModal() {\n  questionNumber = 1;\n  playerScore = 0;\n  wrongAttempt = 0;\n  indexNumber = 0;\n  shuffledQuestions = [];\n  NextQuestion(indexNumber);\n  document.getElementById('score-modal').style.display = \"none\";\n} //function to close warning modal\n\n\nfunction closeOptionModal() {\n  document.getElementById('option-modal').style.display = \"none\";\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NextQuestion\");","map":{"version":3,"sources":["C:/Users/Samuel/Desktop/cApplication/create-react-app-quizz-monday/quiz-m/src/index.js"],"names":["React","ReactDOM","App","questions","question","optionA","optionB","optionC","optionD","correctOption","shuffledQuestions","handleQuestions","length","random","Math","floor","includes","push","questionNumber","playerScore","wrongAttempt","indexNumber","NextQuestion","index","currentQuestion","document","getElementById","innerHTML","checkForAnswer","currentQuestionAnswer","options","getElementsByName","forEach","option","value","labels","id","checked","style","display","backgroundColor","setTimeout","wrongLabelId","handleNextQuestion","unCheckRadioButtons","handleEndGame","resetOptionBackground","i","remark","remarkColor","playerGrade","color","closeScoreModal","closeOptionModal"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n//this would be the object shape for storing the questions  \r\n //you can change the questions to your own taste or even add more questions..\r\n const questions = [\r\n  {\r\n      question: \"How many days makes a week ?\",\r\n      optionA: \"10 days\",\r\n      optionB: \"14 days\",\r\n      optionC: \"5 days\",\r\n      optionD: \"7 days\",\r\n      correctOption: \"optionD\"\r\n  }\r\n]\r\n\r\n\r\nlet shuffledQuestions = [] //empty array to hold shuffled selected questions out of all available questions\r\n\r\nfunction handleQuestions() { \r\n  //function to shuffle and push 10 questions to shuffledQuestions array\r\n//app would be dealing with 10questions per session\r\n  while (shuffledQuestions.length <= 9) {\r\n      const random = questions[Math.floor(Math.random() * questions.length)]\r\n      if (!shuffledQuestions.includes(random)) {\r\n          shuffledQuestions.push(random)\r\n      }\r\n  }\r\n}\r\n\r\n\r\nlet questionNumber = 1 //holds the current question number\r\nlet playerScore = 0  //holds the player score\r\nlet wrongAttempt = 0 //amount of wrong answers picked by player\r\nlet indexNumber = 0 //will be used in displaying next question\r\n\r\n// function for displaying next question in the array to dom\r\n//also handles displaying players and quiz information to dom\r\nfunction NextQuestion(index) {\r\n  handleQuestions()\r\n  const currentQuestion = shuffledQuestions[index]\r\n  document.getElementById(\"question-number\").innerHTML = questionNumber\r\n  document.getElementById(\"player-score\").innerHTML = playerScore\r\n  document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\r\n  document.getElementById(\"option-one-label\").innerHTML = currentQuestion.optionA;\r\n  document.getElementById(\"option-two-label\").innerHTML = currentQuestion.optionB;\r\n  document.getElementById(\"option-three-label\").innerHTML = currentQuestion.optionC;\r\n  document.getElementById(\"option-four-label\").innerHTML = currentQuestion.optionD;\r\n\r\n}\r\n\r\n\r\nfunction checkForAnswer() {\r\n  const currentQuestion = shuffledQuestions[indexNumber] //gets current Question \r\n  const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer\r\n  const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\r\n  let correctOption = null\r\n\r\n  options.forEach((option) => {\r\n      if (option.value === currentQuestionAnswer) {\r\n          //get's correct's radio input with correct answer\r\n          correctOption = option.labels[0].id\r\n      }\r\n  })\r\n\r\n  //checking to make sure a radio input has been checked or an option being chosen\r\n  if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {\r\n      document.getElementById('option-modal').style.display = \"flex\"\r\n  }\r\n\r\n  //checking if checked radio button is same as answer\r\n  options.forEach((option) => {\r\n      if (option.checked === true && option.value === currentQuestionAnswer) {\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          playerScore++ //adding to player's score\r\n          indexNumber++ //adding 1 to index so has to display next question..\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n\r\n      else if (option.checked && option.value !== currentQuestionAnswer) {\r\n          const wrongLabelId = option.labels[0].id\r\n          document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\r\n          document.getElementById(correctOption).style.backgroundColor = \"green\"\r\n          wrongAttempt++ //adds 1 to wrong attempts \r\n          indexNumber++\r\n          //set to delay question number till when next question loads\r\n          setTimeout(() => {\r\n              questionNumber++\r\n          }, 1000)\r\n      }\r\n  })\r\n}\r\n\r\n\r\n\r\n//called when the next button is called\r\nfunction handleNextQuestion() {\r\n  checkForAnswer() //check if player picked right or wrong option\r\n  unCheckRadioButtons()\r\n  //delays next question displaying for a second just for some effects so questions don't rush in on player\r\n  setTimeout(() => {\r\n      if (indexNumber <= 9) {\r\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\r\n          NextQuestion(indexNumber)\r\n      }\r\n      else {\r\n          handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\r\n      }\r\n      resetOptionBackground()\r\n  }, 1000);\r\n}\r\n\r\n//sets options background back to null after display the right/wrong colors\r\nfunction resetOptionBackground() {\r\n  const options = document.getElementsByName(\"option\");\r\n  options.forEach((option) => {\r\n      document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\r\n  })\r\n}\r\n\r\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\r\nfunction unCheckRadioButtons() {\r\n  const options = document.getElementsByName(\"option\");\r\n  for (let i = 0; i < options.length; i++) {\r\n      options[i].checked = false;\r\n  }\r\n}\r\n\r\n// function for when all questions being answered\r\nfunction handleEndGame() {\r\n  let remark = null\r\n  let remarkColor = null\r\n\r\n  // condition check for player remark and remark color\r\n  if (playerScore <= 3) {\r\n      remark = \"Bad Grades, Keep Practicing.\"\r\n      remarkColor = \"red\"\r\n  }\r\n  else if (playerScore >= 4 && playerScore < 7) {\r\n      remark = \"Average Grades, You can do better.\"\r\n      remarkColor = \"orange\"\r\n  }\r\n  else if (playerScore >= 7) {\r\n      remark = \"Excellent, Keep the good work going.\"\r\n      remarkColor = \"green\"\r\n  }\r\n  const playerGrade = (playerScore / 10) * 100\r\n\r\n  //data to display to score board\r\n  document.getElementById('remarks').innerHTML = remark\r\n  document.getElementById('remarks').style.color = remarkColor\r\n  document.getElementById('grade-percentage').innerHTML = playerGrade\r\n  document.getElementById('wrong-answers').innerHTML = wrongAttempt\r\n  document.getElementById('right-answers').innerHTML = playerScore\r\n  document.getElementById('score-modal').style.display = \"flex\"\r\n\r\n}\r\n\r\n//closes score modal, resets game and reshuffles questions\r\nfunction closeScoreModal() {\r\n  questionNumber = 1\r\n  playerScore = 0\r\n  wrongAttempt = 0\r\n  indexNumber = 0\r\n  shuffledQuestions = []\r\n  NextQuestion(indexNumber)\r\n  document.getElementById('score-modal').style.display = \"none\"\r\n}\r\n\r\n//function to close warning modal\r\nfunction closeOptionModal() {\r\n  document.getElementById('option-modal').style.display = \"none\"\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}